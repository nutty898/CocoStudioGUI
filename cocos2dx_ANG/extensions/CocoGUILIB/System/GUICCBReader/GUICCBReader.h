/****************************************************************************
 Copyright (c) 2013 cocos2d-x.org
 
 http://www.cocos2d-x.org
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/

#ifndef __GUI_CCBI__GUICCBReader__
#define __GUI_CCBI__GUICCBReader__

#include "CCBReader.h"

NS_CC_EXT_BEGIN

/* Forward declaration. */
class GUICCNodeLoader;
class GUICCNodeLoaderLibrary;
class GUICCNodeLoaderListener;
class CocoWidget;

/**
 * @brief Parse CCBI file which is generated by CocosBuilder
 */
class GUICCBReader : public CCObject
{
private:
    
    CCData *mData;
    unsigned char *mBytes;
    int mCurrentByte;
    int mCurrentBit;
    
    std::vector<std::string> mStringCache;
    std::set<std::string> mLoadedSpriteSheets;
    
    CCObject *mOwner;
    
    CCBAnimationManager *mActionManager; //retain
    CCDictionary* mActionManagers;
    
    std::set<std::string> *mAnimatedProps;
    
    GUICCNodeLoaderLibrary*mCCNodeLoaderLibrary;
    GUICCNodeLoaderListener *mCCNodeLoaderListener;
    CCBMemberVariableAssigner *mCCBMemberVariableAssigner;
    CCBSelectorResolver *mCCBSelectorResolver;
    
    std::vector<std::string> mOwnerOutletNames;
    CCArray* mOwnerOutletNodes;
    CCArray* mNodesWithAnimationManagers;
    CCArray* mAnimationManagersForNodes;
    
    std::vector<std::string> mOwnerCallbackNames;
    CCArray* mOwnerCallbackNodes;
    std::string mCCBRootPath;
    bool hasScriptingOwner;
    bool init();
    
    CC_SYNTHESIZE(std::string, m_strClassName, ClassName);
public:
    
    bool jsControlled;
    GUICCBReader(GUICCNodeLoaderLibrary *pCCNodeLoaderLibrary, CCBMemberVariableAssigner *pCCBMemberVariableAssigner = NULL, CCBSelectorResolver *pCCBSelectorResolver = NULL, GUICCNodeLoaderListener *pCCNodeLoaderListener = NULL);
    GUICCBReader(GUICCBReader *pCCBReader);
    virtual ~GUICCBReader();
    GUICCBReader();
    
    void setCCBRootPath(const char* pCCBRootPath);
    const std::string& getCCBRootPath() const;
    
    CocoWidget* widgetFromCCBFile(const char *pCCBFileName);
    CocoWidget* widgetFromCCBFile(const char *pCCBFileName, CCObject *pOwner);
    CocoWidget* widgetFromCCBFile(const char *pCCBFileName, CCObject *pOwner, const CCSize &parentSize);
    
    CocoWidget* widgetFromData(CCData *pData, CCObject *pOwner, const CCSize &parentSize);
    
    CCNode* readNodeGraphFromFile(const char *pCCBFileName);
    CCNode* readNodeGraphFromFile(const char *pCCBFileName, CCObject *pOwner);
    CCNode* readNodeGraphFromFile(const char *pCCBFileName, CCObject *pOwner, const CCSize &parentSize);
    
    CCNode* readNodeGraphFromData(CCData *pData, CCObject *pOwner, const CCSize &parentSize);
    
    CCScene* createSceneWithNodeGraphFromFile(const char *pCCBFileName);
    CCScene* createSceneWithNodeGraphFromFile(const char *pCCBFileName, CCObject *pOwner);
    CCScene* createSceneWithNodeGraphFromFile(const char *pCCBFileName, CCObject *pOwner, const CCSize &parentSize);
    
    CCBMemberVariableAssigner* getCCBMemberVariableAssigner();
    CCBSelectorResolver* getCCBSelectorResolver();
    
    CCBAnimationManager* getAnimationManager();
    void setAnimationManager(CCBAnimationManager *pAnimationManager);
    
    // Used in CCNodeLoader::parseProperties()
    std::set<std::string>* getAnimatedProperties();
    std::set<std::string>& getLoadedSpriteSheet();
    CCObject* getOwner();
    
    /* Utility methods. */
    static std::string lastPathComponent(const char* pString);
    static std::string deletePathExtension(const char* pString);
    static std::string toLowerCase(const char* pCCString);
    static bool endsWith(const char* pString, const char* pEnding);
    
    /* Parse methods. */
    int readInt(bool pSigned);
    unsigned char readByte();
    bool readBool();
    std::string readUTF8();
    float readFloat();
    std::string readCachedString();
    bool isJSControlled();
    
    
    bool readCallbackKeyframesForSeq(CCBSequence* seq);
    bool readSoundKeyframesForSeq(CCBSequence* seq);
    
    
    
    CCArray* getOwnerCallbackNames();
    CCArray* getOwnerCallbackNodes();
    CCArray* getOwnerOutletNames();
    CCArray* getOwnerOutletNodes();
    CCArray* getNodesWithAnimationManagers();
    CCArray* getAnimationManagersForNodes();
    
    CCDictionary* getAnimationManagers();
    void setAnimationManagers(CCDictionary* x);  // weak reference
    
    void addOwnerCallbackName(std::string name);
    void addOwnerCallbackNode(CCNode *node);
    
    void addDocumentCallbackName(std::string name);
    void addDocumentCallbackNode(CCNode *node);
    
    static float getResolutionScale();
    static void setResolutionScale(float scale);
    
    CocoWidget* widgetWithCleanUp(bool bCleanUp, CCDictionary* am);
    
    CCNode* readFileWithCleanUp(bool bCleanUp, CCDictionary* am);
    
private:
    void cleanUpNodeGraph(CCNode *pNode);
    bool readSequences();
    CCBKeyframe* readKeyframe(int type);
    
    bool readHeader();
    bool readStringCache();
    //void readStringCacheEntry();
    
    CocoWidget* widget();
    CocoWidget* widget(CocoWidget* pWidgetParent, CCNode * pParent);
    
    void setPropsForWidgetFromCCBFile(CocoWidget* widget);
    void setPropsForContainerWidgetFromCCBFile(CocoWidget* widget);
    void setPropsForPanelFromCCBFile(CocoWidget* widget);
    void setPropsForGradientPanelFromCCBFile(CocoWidget* widget);
    void setPropsForScrollViewCCBFile(CocoWidget* widget);
    void setPropsForImageViewFromCCBFile(CocoWidget* widget);
    void setPropsForImageViewScale9FromCCBFile(CocoWidget* widget);
    void setPropsForTextAreaFromCCBFile(CocoWidget* widget);
    void setPropsForLabelBMFontFromCCBFile(CocoWidget* widget);
    void setPropsForButtonFromCCBFile(CocoWidget* widget);
    void setPropsForControlButtonFromCCBFile(CocoWidget* widget);
    
    CCNode* readNodeGraph();
    CCNode* readNodeGraph(CCNode * pParent);
    
    bool getBit();
    void alignBits();
    
    friend class GUICCNodeLoader;
};

NS_CC_EXT_END

#endif /* defined(__GUI_CCBI__GUICCBReader__) */
